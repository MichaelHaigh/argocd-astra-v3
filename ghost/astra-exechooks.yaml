apiVersion: astra.netapp.io/v1
kind: ExecHook
metadata:
  name: pre-snapshot
  namespace: astra-connector
spec:
  action: snapshot
  applicationRef: ghost
  arguments:
  - pre
  enabled: true
  hookSource: 
  matchingCriteria:
  - type: containerImage
    value: mysql
  stage: pre
---
apiVersion: astra.netapp.io/v1
kind: ExecHook
metadata:
  name: post-snapshot
  namespace: astra-connector
spec:
  action: snapshot
  applicationRef: ghost
  arguments:
  - post
  enabled: true
  hookSource: 
  matchingCriteria:
  - type: containerImage
    value: mysql
  stage: post
